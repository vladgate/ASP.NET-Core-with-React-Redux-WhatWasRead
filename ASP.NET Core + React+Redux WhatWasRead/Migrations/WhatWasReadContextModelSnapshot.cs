// <auto-generated />
using System;
using ASP.NET_Core_React_Redux_WhatWasRead.App_Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASP.NET_Core_React_Redux_WhatWasRead.Migrations
{
    [DbContext(typeof(WhatWasReadContext))]
    partial class WhatWasReadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.AuthorsOfBooks", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorsOfBooks");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.BookTags", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("BookTags");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.BooksWithAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameForLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("TagNameForLabels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNameForLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToView("BooksWithAuthors");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameForLabels")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameForLinks")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            NameForLabels = "Программирование",
                            NameForLinks = "programmirovanie"
                        },
                        new
                        {
                            CategoryId = 2,
                            NameForLabels = "Художественная литература",
                            NameForLinks = "hudozhestvennaja-literatura"
                        },
                        new
                        {
                            CategoryId = 3,
                            NameForLabels = "Тестирование",
                            NameForLinks = "testirovanie"
                        });
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comparator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FilterColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilterName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("FilterTargetId")
                        .HasColumnType("int");

                    b.Property<string>("QueryWord")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FilterId");

                    b.HasIndex("FilterTargetId");

                    b.ToTable("Filters");

                    b.HasData(
                        new
                        {
                            FilterId = 1,
                            Comparator = "equal",
                            FilterColumnName = "NameForLinks",
                            FilterName = "Язык",
                            FilterTargetId = 1,
                            QueryWord = "lang"
                        },
                        new
                        {
                            FilterId = 2,
                            Comparator = "equal",
                            FilterColumnName = "AuthorId",
                            FilterName = "Автор",
                            FilterTargetId = 1,
                            QueryWord = "author"
                        },
                        new
                        {
                            FilterId = 3,
                            Comparator = "between",
                            FilterColumnName = "Pages",
                            FilterName = "Количество страниц",
                            FilterTargetId = 1,
                            QueryWord = "pages"
                        });
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.FilterTarget", b =>
                {
                    b.Property<int>("FilterTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilterTargetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilterTargetSchema")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FilterTargetId");

                    b.ToTable("FilterTargets");

                    b.HasData(
                        new
                        {
                            FilterTargetId = 1,
                            ActionName = "List",
                            ControllerName = "Books",
                            FilterTargetName = "[BooksWithAuthors]",
                            FilterTargetSchema = "[dbo]"
                        });
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameForLabels")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameForLinks")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            NameForLabels = "русский",
                            NameForLinks = "ru"
                        },
                        new
                        {
                            LanguageId = 2,
                            NameForLabels = "английский",
                            NameForLinks = "en"
                        },
                        new
                        {
                            LanguageId = 3,
                            NameForLabels = "украинский",
                            NameForLinks = "ua"
                        });
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("NameForLabels")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameForLinks")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.AuthorsOfBooks", b =>
                {
                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Author", "Author")
                        .WithMany("AuthorsOfBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Book", "Book")
                        .WithMany("AuthorsOfBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Book", b =>
                {
                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.BookTags", b =>
                {
                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Book", "Book")
                        .WithMany("BookTags")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Tag", "Tag")
                        .WithMany("BookTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Filter", b =>
                {
                    b.HasOne("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.FilterTarget", "FilterTarget")
                        .WithMany("Filters")
                        .HasForeignKey("FilterTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterTarget");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Author", b =>
                {
                    b.Navigation("AuthorsOfBooks");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Book", b =>
                {
                    b.Navigation("AuthorsOfBooks");

                    b.Navigation("BookTags");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.FilterTarget", b =>
                {
                    b.Navigation("Filters");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ASP.NET_Core_React_Redux_WhatWasRead.App_Data.DBModels.Tag", b =>
                {
                    b.Navigation("BookTags");
                });
#pragma warning restore 612, 618
        }
    }
}
